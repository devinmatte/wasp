#!/usr/bin/python3

import argparse
import json
import os
import subprocess
from urllib.parse import urlparse


class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def is_hex_color(string):
    """
    Checks to see if string is a hex color
    :param string: user input, checking for validity
    :return: True if string is 3 or 6 characters, or false otherwise
    """
    try:
        int(string, 16)
    except ValueError:
        return False
    return len(string) == 3 or len(string) == 6


def is_valid_lang_code(string):
    valid_langs = ["ab", "aa", "af", "ak", "sq", "am", "ar", "an", "hy", "as", "av", "ae", "ay", "az", "bm", "ba", "eu", "be", "bn", "bh", "bi", "bs", "br", "bg", "my", "ca", "ch", "ce", "ny", "zh", "zh-Hans", "zh-Hant", "cv", "kw", "co", "cr", "hr", "cs", "da", "dv", "nl", "dz", "en", "eo", "et", "ee", "fo", "fj", "fi", "fr", "ff", "gl", "gd", "gv", "ka", "de", "el", "kl", "gn", "gu", "ht", "ha", "he", "hz", "hi", "ho", "hu", "is", "io", "ig", "id", "in", "ia", "ie", "iu", "ik", "ga", "it", "ja", "jv", "kl", "kn", "kr", "ks", "kk", "km", "ki", "rw", "rn", "ky", "kv", "kg", "ko", "ku", "kj", "lo", "la", "lv", "li", "ln", "lt", "lu", "lg", "lb", "gv", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mh", "mo", "mn", "na", "nv", "ng", "nd", "ne", "no", "nb", "nn", "ii", "oc", "oj", "cu", "or", "om", "os", "pi", "ps", "fa", "pl", "pt", "pa", "qu", "rm", "ro", "ru", "se", "sm", "sg", "sa", "sr", "sh", "st", "tn", "sn", "ii", "sd", "si", "ss", "sk", "sl", "so", "nr", "es", "su", "sw", "ss", "sv", "tl", "ty", "tg", "ta", "tt", "te", "th", "bo", "ti", "to", "ts", "tr", "tk", "tw", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "cy", "wo", "fy", "xh", "yi", "ji", "yo", "za", "zu"]
    if string in valid_langs:
        return True
    else:
        return False


class Manifest:
    def __init__(self, details: dict):
        self.details = details

    def generate(self):
        manifest = {
            "name": self.details['name'],
            "description": self.details['description'],
            "short_name": self.details['short_name'],
            "theme_color": self.details['theme_color'],
            "background_color": self.details['background_color'],
            "start_url": self.details['start_url'],
            "display": self.details['display'],
            "lang": self.details['lang'],
            "orientation": self.details['orientation'],
            "dir": self.details['dir']
        }
        if self.details['related_applications_check'].lower() == 'y':
            manifest["related_applications"] = self.details['related_applications']
            manifest["prefer_related_applications"] = self.details['prefer_related_applications']
        if self.details['icons_check'].lower() == 'y':
            manifest["icons"] = self.details['icons']

        with open('manifest.json', 'w') as fp:
            json.dump(manifest, fp, sort_keys=True, indent=4, separators=(',', ': '))

    def set(self):
        self.short_name()
        self.theme_color()
        self.background_color()
        self.display()
        self.lang()
        self.dir()
        self.start_url()
        self.orientation()
        self.related_applications()
        self.icons()
        return self

    def short_name(self):
        self.details['short_name'] = input(
            "Short Name " + str(on(["M"], args)) + " (" + Colors.OKBLUE + self.details['name'][
                                                                          0:12] + Colors.ENDC + "): ")
        if self.details['short_name'] == '':
            self.details['short_name'] = self.details['name'][0:12]

    def theme_color(self):
        self.details['theme_color'] = input("Theme Color " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "#FFF" + Colors.ENDC + "): #")
        if self.details['theme_color'] == "":
            self.details['theme_color'] = '#FFF'
        elif not is_hex_color(self.details['theme_color']):
            self.theme_color()
        else:
            self.details['theme_color'] = self.details['theme_color'].upper()
            self.details['theme_color'] = '#' + self.details['theme_color']

    def background_color(self):
        self.details['background_color'] = input("Background Color " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "#FFF" + Colors.ENDC + "): #")
        if self.details['background_color'] == "":
            self.details['background_color'] = '#FFF'
        elif not is_hex_color(self.details['background_color']):
            self.background_color()
        else:
            self.details['background_color'] = self.details['background_color'].upper()
            self.details['background_color'] = '#' + self.details['background_color']

    def start_url(self):
        self.details['start_url'] = input("Starting URL " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "/" + Colors.ENDC + "): ")
        if self.details['start_url'] == '':
            self.details['start_url'] = "/"

    def lang(self):
        default_lang = "en"
        self.details['lang'] = input("Language " + str(on(["M"], args)) + " (" + Colors.OKBLUE + default_lang + Colors.ENDC + "): ")
        if is_valid_lang_code(str(self.details['lang'])):
            self.details['lang'] = self.details['lang']
        elif self.details['lang'] == "":
            self.details['lang'] = default_lang
        else:
            print("Please enter a valid language code")
            self.lang()

    def dir(self):
        dir_val = input("Text Direction " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "auto" + Colors.ENDC + "): ")
        if dir_val.lower() == "ltr" \
                or dir_val.lower() == "rtl" \
                or dir_val.lower() == "auto":
            self.details['dir'] = dir_val.lower()
        elif dir_val == '':
            self.details['dir'] = "auto"

    def related_application_url(self):
        related_applications_url = input("URL " + str(on(["M"], args)) + ": ")
        if related_applications_url != "":
            if bool(urlparse(related_applications_url).scheme):
                return related_applications_url
            else:
                print("Please enter a valid URL")
                return self.related_application_url()

    def related_application(self):
        new_related_application = {}

        related_applications_platform = input("Platform " + str(on(["M"], args)) + ": ")
        if related_applications_platform != "":
            new_related_application['platform'] = related_applications_platform.lower()
            # TODO: Validation

        new_related_application['url'] = self.related_application_url()

        related_applications_id = input("ID " + str(on(["M"], args)) + ": ")
        if related_applications_id != "":
            new_related_application['id'] = related_applications_id.lower()
            # TODO: Validation

        self.details['related_applications'].append(new_related_application)
        related_applications = input(
            "Add another Related Application? " + str(on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")

        if related_applications.lower() == 'y':
            self.related_application()

    def related_applications(self):
        self.details['related_applications_check'] = input("Do you want to include related applications? " + str(
            on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
        if self.details['related_applications_check'].lower() == 'y':
            prefer_related_applications = input("Prefer Related Applications? " + str(on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")

            if prefer_related_applications.lower() == 'y':
                self.details['prefer_related_applications'] = True
            elif prefer_related_applications.lower() == 'n' or prefer_related_applications.lower() == '':
                self.details['prefer_related_applications'] = False
            related_applications = input("Add a Related Application? " + str(on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
            self.details['related_applications'] = []

            if related_applications.lower() == 'y':
                self.related_application()

    def icon_src(self):
        icons_src = input("Image src " + str(on(["M"], args)) + ": ")
        if icons_src != "":
            if os.path.isfile(icons_src) or bool(urlparse(icons_src).scheme):
                return icons_src
            else:
                print("Please enter a valid path or URL")
                return self.icon_src()

    def icon(self):
        new_icon = {}

        new_icon['src'] = self.icon_src()

        icons_type = input("Type " + str(on(["M"], args)) + ": ")
        if icons_type != "":
            new_icon['type'] = icons_type.lower()
            # TODO: Validation

        icons_sizes = input("Sizes " + str(on(["M"], args)) + ": ")
        if icons_sizes != "":
            new_icon['sizes'] = icons_sizes.lower()
            # TODO: Validation

        self.details['icons'].append(new_icon)
        icons = input(
            "Add another Icon? " + str(on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")

        if icons.lower() == 'y':
            self.icon()

    def icons(self):
        self.details['icons_check'] = input("Do you want to include Icons? " + str(on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
        if self.details['icons_check'].lower() == 'y':
            icons = input("Add an Icon? " + str(
                on(["M"], args)) + " (y/" + Colors.OKBLUE + "n" + Colors.ENDC + "): ")
            self.details['icons'] = []

            if icons.lower() == 'y':
                self.icon()

    def display(self):
        self.details['display'] = input(
            "Display " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "minimal-ui" + Colors.ENDC + "): ")
        if self.details['display'].lower() == "minimal-ui" \
                or self.details['display'].lower() == "browser" \
                or self.details['display'].lower() == "standalone" \
                or self.details['display'].lower() == "fullscreen":
            self.details['display'] = self.details['display'].lower()
        elif self.details['display'] == '':
            self.details['display'] = "minimal-ui"
        else:
            print("Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#display")
            self.display()

    def orientation(self):
        self.details['orientation'] = input(
            "Display Orientation " + str(on(["M"], args)) + " (" + Colors.OKBLUE + "any" + Colors.ENDC + "): ")
        if self.details['orientation'].lower() == "any" \
                or self.details['orientation'].lower() == "natural" \
                or self.details['orientation'].lower() == "landscape" \
                or self.details['orientation'].lower() == "landscape-primary" \
                or self.details['orientation'].lower() == "landscape-secondary" \
                or self.details['orientation'].lower() == "portrait" \
                or self.details['orientation'].lower() == "portrait-primary" \
                or self.details['orientation'].lower() == "portrait-secondary":
            self.details['orientation'] = self.details['orientation'].lower()
        elif self.details['orientation'] == '':
            self.details['orientation'] = "any"
        else:
            print(
                "Please enter one of the options from https://developer.mozilla.org/en-US/docs/Web/Manifest#orientation")
            self.orientation()


def on(options, args):
    return_options = "["
    for i, s in enumerate(options):
        if s == "M" and args.manifest:
            return_options += Colors.OKGREEN + "M" + Colors.ENDC
        else:
            return_options += s

        if i < len(options) - 1:
            return_options += " "
    return return_options + "]"


def privacy():
    input_val = input("Privacy " + str(on([], args)) + " (" + Colors.OKBLUE + "private" + Colors.ENDC + "): ")
    if input_val.lower() == "public" or input_val.lower() == "private":
        return input_val.lower()
    elif input_val == "":
        return "private"
    else:
        print("Please enter \"public\" or \"private\"")
        privacy()


def authors():
    process = subprocess.Popen(["git", "config", "--get", "user.name"], stdout=subprocess.PIPE)
    author = (process.communicate()[0]).decode("utf-8").strip().split('\n')[0]

    author_val = input("Authors " + str(on([], args)) + " (" + Colors.OKBLUE + author + Colors.ENDC + "): ")
    if author_val == '':
        author_val = author
    return author_val


def name():
    name_val = input(
        "Project/Software Name " + str(on(["M"], args)) + " (" + Colors.OKBLUE + directory[0:45] + Colors.ENDC + "): ")
    if name_val == '':
        name_val = directory[0:45]
    return name_val


try:
    description = 'Generate and create basic resources for a modern web app. Initialize a project with a manifest, package, and tags versions effectively'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('task', metavar='task', type=str, help='A task to perform. Options : init, update, tag')
    parser.add_argument('-m', '--manifest', action='store_true', help='Generate a manifest.json for your project')
    # parser.add_argument('-p', '--package', action='store_true', help='Generate a package.json for your project')

    args = parser.parse_args()

    directory = os.path.basename(os.getcwd())

    if args.task == 'init':
        details = {}

        print("Thanks for using Wasp!\n")

        details['name'] = name()
        details['description'] = input("Description " + str(on(["M"], args)) + ": ")
        details['keywords'] = input("Keywords " + str(on([], args)) + ": ")
        details['authors'] = authors()
        details['licence'] = input("Licence " + str(on([], args)) + ": ")
        details['website'] = input("Website " + str(on([], args)) + ": ")
        details['privacy'] = privacy()

        if args.manifest:
            print("\nNow let's collect some Manifest Information\n")
            Manifest(details).set().generate()

            # with open('.wasp.json', 'w') as fp:
            #     json.dump(details, fp, sort_keys=True, indent=4, separators=(',', ': '))

except (KeyboardInterrupt, SystemExit):
    exit(1)
